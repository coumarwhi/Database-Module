EXERCISES

1. Write pseudocode for bubble sort.

A: 
FUNCTION BubbleSort (list)
  FOR all elements of list
    IF list[i] > list[i+1]
      swap list[i] and list[i + 1]
    END IF
  END FOR
  IF not swaped
    break
  END IF
  RETURN list
END FUNCTION 

2. Write pseudocode for quicksort.

A: 
FUNCTION quickSort (list, left, right)
  IF left < right THEN
      pivotPosition = Partition(list, left, right)
      quickSort(list, left, pivotPosition - 1)
      quickSort(list, pivotPosition + 1, right)
  END IF 
END FUNCTION 

3: We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. Walking through each algorithm with a few sample collections may help.

A: Merge sort and Quick sort are more efficient because they reduce how often the collection has to be passed through. If the collection does need to be passed through again, it's in sections, or most of the sorting has already been achieved, therefore relatively little time is spent re-sorting after the initial steps. 

4. All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?

A: Bucket sort distributes elements of an array into a number of "buckets". Within these buckets the elements are sorted individually, then "emptied" back into the original array in the bucket order. The input for bucket sort is ideal when it is uniformly distributed over a range. 